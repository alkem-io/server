# Configuration file for Cherrytwist.
#
# This is a YAML file: see [1] for a quick introduction. Note in particular
# that *indentation is important*: all the elements of a list or dictionary
# should have the same indentation.
#
# [1] https://docs.ansible.com/ansible/latest/reference_appendices/YAMLSyntax.html

## hosting ##

# The hosting configuration for the Cherrytwist Server
#
hosting:
  # The port will be used in the ingress configuration (e.g. traefik)
  # for routing the requests from the public-facing endpoint (e.g. https://dev.cherrytwist.org/graphql)
  # to the ct-server service, orchestrated with the orchestration engine of your choice, e.g. kubernetes or docker-compose.
  # The graphql port is also used for internal communication between the services inside the e.g. kubernetes cluster.
  #
  port: ${GRAPHQL_ENDPOINT}:4000

  # The environment is used in multiple places - to determine whether dev tooling is enabled (in e.g. Dev env)
  # and can also be used for logging to the correct environment in an ELK cluster / ElasticCloud instance.
  #
  environment: ${ENVIRONMENT}:Dev

## bootstrap ##

# The bootstrap configuration for the Cherrytwist Server.
# Used to define the configuration needed to initialize a functional Cherrytwist instance.
# The bootstrap configuration files have the minimum set of users and credentials to start using Cherrytwist.
#

bootstrap:
  # The authorisationBootstrapPath is used as a path to a config file used for bootstrapping the default CT users and credentials.
  authorisationBootstrapPath: ${AUTH_BOOTSTRAP_PATH}

## security ##

# Security configuration section for Cherrytwist Server. It is used to define security
# settings minimizing the risk of unauthorized access.
security:
  # cors settings for the application
  cors:
    # Origin of the graphql requests to the Cherrytwist Server.
    # Defaults to * (insecure, not recommended for production usage).
    # Change to a value that whitelists your request origin.
    origin: ${CORS_ORIGIN}:*

    # Cors methods allowed in the Cherrytwist Server.
    # Defaults to GET,HEAD,PUT,PATCH,POST,DELETE.
    # Graphql uses mostly POST - the rest of the methods are left for utility REST endpoints.
    # If no REST endpoints are used (they are kept for ease of development) the list of allowed methods can be reduced.
    methods: ${CORS_METHODS}:GET,HEAD,PUT,PATCH,POST,DELETE

    # Cors allowed headers.
    # Defaults to Origin,X-Requested-With,Content-Type,Accept,Authorization.
    allowedHeaders: ${CORS_ALLOWED_HEADERS}:Origin,X-Requested-With,Content-Type,Accept,Authorization

## identity ##

# Identity configuration section for Cherrytwist Server. Here is defined all authentication and authorization
# configuration. Configuration is unique per provider.
# In Cherrytwist Authentication Providers and Identity Providers (Servers, Services) might be used interchangably
# as in the context of the platform, the only functionality used from an Identity Provider from a specific
# vendor is acquiring an access token and extracting its email (in other words, authentication). The email is used for matching the user account
# (provided from the Identity Server, e.g. AAD) against the user profile in the Cherrytwist domain model.
# Traditional Identity Provider functionality like federation, account management etc. are out-of-scope in Cherrytwist.
# Authorization is Credential-based, validating whether the user has valid credentials for the
# requested resource.
identity:

## authentication ##
# Authentication configuration section for Cherrytwist Server. Here is defined both the configuration
# required for the server to process authentication requests (via passportJS strategies) and the
# client-side configuration required to authenticate to the Identity Servers (e.g. AAD) and generate
# valid Authorization Header (Bearer access token).
    authentication:

# A flag setting whether requeststed resource access needs to be checked with a nestJS guard implementing
# the specific passportJS strategy of the enabled identity providers.
    enabled: ${AUTH_ENABLED}:true

# A list of Identity Providers used for authenticating the user account that is later
# mapped to the Cherrytwist user profile. The claims in the access token that are used in
# Cherrytwist are the user email and the token expiration time.
    providers:

# Azure Active Directory Authentication Provider. Provides configuration for both Cherrytwist Server
# and Cherrytwist Client. Supports different flows to cover the needs of the platform, including automated testing.
# All default values are from the Cherrytwist Playground AAD instance.
      aad:

# OpenID Connect metadata document endpoint.
        identityMetadata: ${AUTH_AAD_IDENTITY_METADATA}:https://login.microsoftonline.com/524e761c-d162-4fdf-ab43-2855246d986c/v2.0/.well-known/openid-configuration

# Cherrytwist Server clientID. The AAD application is called cherrytwist-api in the playground AAD instance.
        clientID: ${AUTH_AAD_CHERRYTWIST_API_APP_ID}:505041fc-fca2-4a74-88ee-6d50a6417e38

# Flag checking whether the issuer of the access token needs to be validated.
        validateIssuer: true

# Flag checking whether the request should be passed in the passportJS callback.
# By default it's passed in the platform - but it's not actively used. This setting is useful
# for debugging issues with Authentication Providers - e.g. in src/core/authentication/aad.bearer.strategy.ts
# the _req field in validate function can be used for tracing issues.
        passReqToCallback: true

# Issuer of the access token used in Cherrytwist Server
        issuer: ${AUTH_AAD_ISSUER}:https://login.microsoftonline.com/524e761c-d162-4fdf-ab43-2855246d986c/v2.0

# Audience that the ID token issues by AAD is intended for.
# The relationship between audiences, scopes, APIs and access tokens is well defined in this article:
# https://www.pingidentity.com/en/company/blog/posts/2019/oauth2-access-token-multiple-resources-usage-strategies.html
        audience: ${AUTH_AAD_CHERRYTWIST_API_APP_ID}:505041fc-fca2-4a74-88ee-6d50a6417e38

# toDo - move out of config
        allowMultiAudiencesInToken: false

        loggingLevel: ${AUTH_AAD_LOGGING_LEVEL}:Error

# toDo - move out of config
        scope: ['Cherrytwist-GraphQL']

# Flag setting whether Personal Identifiable Information (PII) can be logged.
# Defaults to false. Note: there is a
        loggingNoPII: false
        upnDomain: ${AUTH_AAD_UPN_DOMAIN}:playgroundcherrytwist.onmicrosoft.com
        tenant: ${AUTH_AAD_TENANT}
        ropc:
          clientSecret: ${AUTH_AAD_CLIENT_APP_SECRET}
          username: ${AUTH_AAD_USER_UPN}:admin@playgroundcherrytwist.onmicrosoft.com
          password: ${AUTH_AAD_USER_PASSWORD}
        client:
          clientId: ${AUTH_AAD_CLIENT_APP_ID}:feb6d8b1-8cc2-4e7d-a419-ad7b544b0832
          authority: ${AUTH_AAD_AUTHORITY}:https://login.microsoftonline.com/524e761c-d162-4fdf-ab43-2855246d986c
          redirectUri: ${AUTH_AAD_CLIENT_LOGIN_REDIRECT_URI}:http://localhost:3000
      demo_auth_provider:
        issuer: ${AUTH_DEMO_AUTH_ISSUER}:http://localhost:3002
        tokenEndpoint: ${AUTH_DEMO_AUTH_TOKEN_ENDPOINT}:http://localhost:3002/auth/login
        clientSecret: ${AUTH_DEMO_AUTH_CLIENT_SECRET}:!#@$#SDFRSF
monitoring:
  logging:
    consoleLoggingEnabled: ${LOGGING_CONSOLE_ENABLED}:false
    level: ${LOGGING_LEVEL_CONSOLE}:Error
    profilingEnabled: ${LOGGING_PROFILING_ENABLED}:true
  elastic:
    enabled: ${LOGGING_ELK_ENABLED}:false
    loggingLevel: ${LOGGING_LEVEL_ELK}:Error
    cloud:
      id: ${ELASTIC_CLOUD_ID}
      username: ${ELASTIC_CLOUD_USERNAME}
      password: ${ELASTIC_CLOUD_PASSWORD}
communications:
  matrix:
    server:
      name: ${SYNAPSE_SERVER_NAME}:cherrytwist.matrix.host
    shared:
      secret: ${SYNAPSE_SHARED_SECRET}:n#P.uIl8IDOYPR-fiLzDoFw9ZPvTIlYg7*F9*~eaDZFK#;.KRg
storage:
  ipfs:
    endpoint: ${IPFS_ENDPOINT}:http://ct_ipfs_server:5001
    clientEndpoint: ${IPFS_CLIENT_ENDPOINT}:http://localhost:8080/ipfs
    maxFileSize: 1048576
  database:
    host: ${DATABASE_HOST}:localhost
    port: 3306
    username: 'root'
    password: ${MYSQL_ROOT_PASSWORD}:toor
    schema: ${MYSQL_DATABASE}:cherrytwist
    database: ${MYSQL_DATABASE}:cherrytwist
    logging: false
