# Configuration file for Alkemio.
#
# This is a YAML file: see [1] for a quick introduction. Note in particular
# that *indentation is important*: all the elements of a list or dictionary
# should have the same indentation.
#
# [1] https://docs.ansible.com/ansible/latest/reference_appendices/YAMLSyntax.html
#
# For most of the configuration values there is a default supplied, this is after the ":".
# To overwrite the default value, set environment variable with the name as is shown before the ":".

## hosting ##
# The hosting configuration for the Alkemio Server
hosting:
  # The port that the Alkemio server will be listening on.
  # For clusters (e.g. docker-compose, kubernetes) this should also be the port that is used  in the ingress configuration (e.g. traefik).
  # This is then used for routing the requests from the public-facing endpoint (e.g. https://dev.alkem.io/graphql)
  # to the alkemio-server service, orchestrated with the orchestration engine of your choice, e.g. kubernetes or docker-compose.
  # The graphql port is also used for internal communication between the services inside the e.g. kubernetes cluster.
  #
  port: ${GRAPHQL_PORT}:4000

  # The entry point for the cluster
  endpoint_cluster: ${ENDPOINT_CLUSTER}:http://localhost:3000

  # The path from the end point for all public api rest requests.
  # It is combined with the `endpoint` above to provide the full path for incoming requests targeting the public Rest api.
  #
  path_api_public_rest: ${PATH_API_PUBLIC_REST}:/api/public/rest

  # The path from the end point for all public api rest requests.
  # It is combined with the `endpoint` above to provide the full path for incoming requests targeting the public Rest api.
  #
  path_api_public_graphql: ${PATH_API_PUBLIC_GRAPHQL}:/api/public/graphql

  # The type of environment is used in multiple places to determine whether dev tooling is enabled.
  # The tyoe of environment can also be used for monitoring / logging / analysis in an ELK cluster / ElasticCloud instance.
  # For production deployments it should be set to Prod.
  #
  # Options: Dev, Prod
  environment: ${ENVIRONMENT}:Dev

  # Support for subscriptions enabled or not. These require WebSocket connectioins
  subscriptions:
    enabled: ${SUBSCRIPTIONS_ENABLED}:false

  max_json_payload_size: ${HOSTING_MAX_JSON_PAYLOAD_SIZE}:64mb
## bootstrap ##
# Used to determine the the information that is used to to initialize a functional Alkemio instance.
bootstrap:
  # The bootstrap authorization file specifies the minimum set of users and their associated credentials that are always available
  # in the Alkemio instance.
  #
  # Default: the default file that is picked up is: src/services/configuraiton/templates/authorization-bootstrap.json.
  authorization:
    enabled: ${BOOTSTRAP_AUTHORIZATION_ENABLED}:true
    file: ${BOOTSTRAP_AUTHORIZATION_FILE}

## security ##
# The various means by which the security of the Alkemio platform can be configured.
security:
  # cors settings for the application
  cors:
    # Need to be able to disable cors checks on the server when running behind another reverse proxy that is setting
    # a cors origin header e.g. oathkeeper
    enabled: ${CORS_ENABLED}:true

    # Origin of the graphql requests to the Alkemio Server.
    # Defaults to * (insecure, not recommended for production usage).
    # Change to a value that whitelists your request origin.
    origin: ${CORS_ORIGIN}:*

    # Cors methods allowed in the Alkemio Server.
    # Defaults to GET,HEAD,PUT,PATCH,POST,DELETE.
    # Graphql uses mostly POST - the rest of the methods are left for utility REST endpoints.
    # If no REST endpoints are used (they are kept for ease of development) the list of allowed methods can be reduced.
    methods: ${CORS_METHODS}:GET,HEAD,PUT,PATCH,POST,DELETE

    # Cors allowed headers.
    allowed_headers: ${CORS_ALLOWED_HEADERS}:Origin,X-Requested-With,Content-Type,Accept,Authorization

## identity ##

# Defines all authentication and authorization configuration.
# Authentication is pluggable, using the notion of "Authentication Providers", which have the responsibility to authenticate users.
# Authorization is handled within the platform.
#
# Note: the term Authentication Provider is based on the more widely understood concept of Identity Providers (Servers, Services),
# but it is in Alkemio restricted to Authentication. Configuration is unique per provider.
#
# The only functionality used from an Authentication Provider is acquiring an access token (in other words, authentication) and
# extracting the users email .
# The email is used for matching the user account (provided from the Identity Server, e.g. Ory Kratos) to the user profile in Alkemio.
# Traditional Identity Provider functionality like federation, account management etc. are out-of-scope in Alkemio.
#
# Authorization is Credential-based, validating whether the user has valid credentials for the requested resource.
identity:
  ## authentication ##
  # Defines both the configuration required for the server to process authentication requests (via passportJS strategies) and the
  # client-side configuration required to authenticate to the Identity Servers (e.g. Ory Kratos) and generate
  # valid Authorization Header (Bearer access token).
  authentication:
    # A flag setting whether Authentication based on non-interactive login is enabled.
    api_access_enabled: ${AUTH_API_ENABLED}:true

    # A list of Identity Providers that can be used for authenticating the user.
    # The claims in the access token that are used in Alkemio are the user email and the token expiration time.
    providers:
      # Ory Kratos Next Gen Identity Provider (https://github.com/ory/kratos).
      ory:
        # Issuer of the kratos cookie. The cookie can be used as is or mutated by
        # Ory Oathkeeper into an ID token. The session can be found at (default)
        # http://localhost:4433/sessions/whoami
        # A session looks like:
        #
        # {
        #   "id": "b237fd33-cb69-4670-a154-7c70f7d8db52",
        #   "active": true,
        #   "expires_at": "2021-05-20T13:29:55Z",
        #   "authenticated_at": "2021-05-19T13:29:55Z",
        #   "issued_at": "2021-05-19T13:29:55Z",
        #   "identity": {
        #     "id": "972164de-efdd-4a4c-bfcb-382a9ba9b6f4",
        #     "schema_id": "default",
        #     "schema_url": "http://localhost:4455/.ory/kratos/public/schemas/default",
        #     "traits": {
        #       "name": { "last": "Admin", "first": "Admin" },
        #       "email": "admin@alkem.io"
        #     },
        #     "verifiable_addresses": [
        #       {
        #         "id": "f271a114-ef14-4f07-9899-5c1dbfeebee1",
        #         "value": "admin@alkem.io",
        #         "verified": false,
        #         "via": "email",
        #         "status": "sent",
        #         "verified_at": null
        #       }
        #     ],
        #     "recovery_addresses": [
        #       {
        #         "id": "796b183e-49b0-493f-acbc-c821dd4eb177",
        #         "value": "admin@alkem.io",
        #         "via": "email"
        #       }
        #     ]
        #   }
        # }
        issuer: ${AUTH_ORY_KRATOS_ISSUER}:http://alkemio-server-dev/

        # JSON Web Key Sets endpoint. Used for validating the JWT token signed
        # by Ory Oathkeeper. A set of keys looks like:
        # {
        #   "keys": [
        #     {
        #       "use": "sig",
        #       "kty": "RSA",
        #       "kid": "a2aa9739-d753-4a0d-87ee-61f101050277",
        #       "alg": "RS256",
        #       "n": "zpjSl0ySsdk_YC4ZJYYV-cSznWkzndTo0lyvkYmeBkW60YHuHzXaviHqonY_DjFBdnZC0Vs_QTWmBlZvPzTp4Oni-eOetP-Ce3-B8jkGWpKFOjTLw7uwR3b3jm_mFNiz1dV_utWiweqx62Se0SyYaAXrgStU8-3P2Us7_kz5NnBVL1E7aEP40aB7nytLvPhXau-YhFmUfgykAcov0QrnNY0DH0eTcwL19UysvlKx6Uiu6mnbaFE1qx8X2m2xuLpErfiqj6wLCdCYMWdRTHiVsQMtTzSwuPuXfH7J06GTo3I1cEWN8Mb-RJxlosJA_q7hEd43yYisCO-8szX0lgCasw",
        #       "e": "AQAB"
        #     }
        #   ]
        # }
        jwks_uri: ${AUTH_ORY_KRATOS_JWKS_URI}:http://localhost:3000/jwks/.well-known/jwks.json

        # Ory Kratos Base Public URL. It is used as prefix for all Kratos flows.
        # Locally, Kratos Public API works on http://localhost:3000/identity/ory/kratos/public and by default in k8s it works on https://[HOST]/identity/ory/kratos/public
        # NB: The default kratos.yml config defines the selfservice endpoints with base address http://localhost:3000/identity.
        # That is used as there is a reverse proxy in front of the Alkemio Web Client that forwards the calls to the Kratos Public URL.
        # You can check the currently logged in user at http://localhost:3000/identity/ory/kratos/public/sessions/whoami.
        kratos_public_base_url: ${AUTH_ORY_KRATOS_PUBLIC_BASE_URL}:http://localhost:3000/identity/ory/kratos/public

        # Ory Kratos URL for usage by the Alkemio server when inside a cluster.
        kratos_public_base_url_server: ${AUTH_ORY_KRATOS_PUBLIC_BASE_URL_SERVER}:http://localhost:3000/identity/ory/kratos/public

## monitoring ##
# This section defines settings used for DevOps - monitoring providers, endpoints, logging configuration.
monitoring:
  # logging & profiling section.
  logging:
    # A flag setting whether Winston Console transport will be enabled.
    # If the flag is set to true logs of the appropriate level (see below) will be outputted to the console
    # after the application has been bootstrapped.
    # The NestJS bootstrap process is handled by the internal NestJS logging.
    console_logging_enabled: ${LOGGING_CONSOLE_ENABLED}:true

    # Logging level for outputs to console.
    # Valid values are log|error|warn|debug|verbose.
    level: ${LOGGING_LEVEL_CONSOLE}:verbose

    # A flag enabling / disabling performance logging.
    profiling_enabled: ${LOGGING_PROFILING_ENABLED}:true

    # Logging of the incoming requests to the server
    requests:
      # Log the full request object. NOT Recommended, because the object is huge.
      full_logging_enabled: ${LOGGING_REQ_FULL_ENABLED}:false

      # Log request headers. Requires Logging Level at least verbose.
      headers_logging_enabled: ${LOGGING_REQ_HEADERS_ENABLED}:false

    # Logging of the responses from the server
    responses:
      # Log response headers. Requires Logging Level at least verbose.
      headers_logging_enabled: ${LOGGING_RES_HEADERS_ENABLED}:false

    # To allow logging of a particular context to a file
    context_to_file:
      enabled: ${LOGGING_CONTEXT_ENABLED}:false
      # The file name to use
      filename: ${LOGGING_CONTEXT_FILENAME}:subscriptions.log
      # The context to actually log
      context: ${LOGGING_CONTEXT_ID}:subscriptions

  # Elastic logging configuration
  elastic:
    # A flag setting whether Winston Elastic transport will be enabled.
    # If the flag is set to true logs of the appropriate level (see below) will be outputted to Elastic
    # given a correct Elastic Cloud endpoints are provided.
    enabled: ${LOGGING_ELK_ENABLED}:false

    # Logging level for outputs to elastic.
    # Valid values are log|error|warn|debug|verbose.
    logging_level: ${LOGGING_LEVEL_ELK}:Error

    # Elastic Cloud configuration
    cloud:
      # Elastic Cloud ID. Typically it will look like (e.g., this is not a valid value):
      # elastic-observability-deployment-dev:d2VzdGV1cm9wZS5henVyZS5lbGFzdGljLWNsb3VkLVfBcTo5MjQzJGMyZjJiYTM4ZmM0ZTQyZjY5N2Q5MDU2YjIxYzkyNzY3JDRjMDAxNjYzZTQzMDQzNThhNTkwMzY2MWI2ZDU5MTVl
      id: ${ELASTIC_CLOUD_ID}

      # Elastic Cloud username. Defaults to 'elastic'.
      username: ${ELASTIC_CLOUD_USERNAME}

      # Elastic Cloud password.
      password: ${ELASTIC_CLOUD_PASSWORD}

  # Sentry (client) logging configuration
  sentry:
    # A flag setting whether Sentry monitoring will be used on the client.
    enabled: ${LOGGING_SENTRY_ENABLED}:false

    # Logging end point for sentry
    endpoint: ${LOGGING_SENTRY_ENDPOINT}

    # Flag to control whether PII should be included on monitoring
    submit_pii: ${LOGGING_SENTRY_PII_ENABLED}:false

## communications ##
# Section defining all configuration parameters / endpoints required for communication between different actors (user-user, community-user etc) in Alkemio.
communications:
  enabled: ${COMMUNICATIONS_ENABLED}:true
  discussions:
    enabled: ${COMMUNICATIONS_DISCUSSIONS_ENABLED}:true

  # the size of the agent pool to use for managing agent wrappers around Matrix client
  agentpool_size: ${COMMUNICATIONS_AGENTPOOL_SIZE}:50

  # matrix configuration #
  matrix:
    # Synapse home server name, defined in homeserver.yaml on the Synapse instance.
    homeserver_name: ${SYNAPSE_HOMESERVER_NAME}:alkemio.matrix.host

    # Synapse server (https://github.com/matrix-org/synapse) configuration.
    server:
      # Synapse server URL, where it can be accessed by the Alkemio server
      url: ${SYNAPSE_SERVER_URL}:http://localhost:8008
      # Synapse shared secret, defined in homeserver.yaml on the Synapse instance.
      shared_secret: ${SYNAPSE_SERVER_SHARED_SECRET}:n#P.uIl8IDOYPR-fiLzDoFw9ZPvTIlYg7*F9*~eaDZFK#;.KRg

    admin:
      # The admin account that is created / used to administer the regular users on the Synapse server
      username: ${SYNAPSE_ADMIN_USERNAME}:matrixadmin@alkem.io
      password: ${SYNAPSE_ADMIN_PASSWORD}:change_me_now

## storage ##
# Alkemio uses multiple types of persistent storage, including SQL database and IPFS.
storage:
  # MySQL database configuration for usage by the Alkemio Server.
  # The authentication method used by Alkemio Server is MySQL Native Password.
  # Note: both schema / database name are used for configuration and they need to have the same value.
  database:
    # Database host.
    host: ${DATABASE_HOST}:localhost

    # MySQL daemon port.
    port: 3306

    # MySQL username.
    username: 'root'

    # MySQL password.
    password: ${MYSQL_ROOT_PASSWORD}:toor

    # MySQL schema / database name.
    schema: ${MYSQL_DATABASE}:alkemio

    # MySQL schema / database name.
    database: ${MYSQL_DATABASE}:alkemio

    # Flag setting whether MySQL operations should be logged to the console.
    logging: ${ENABLE_ORM_LOGGING}:false

  # IPFS (https://ipfs.io/) configuration.
  ipfs:
    # IPFS API endpoint. The name that the server uses for access IPFS for uploads.
    endpoint: ${IPFS_ENDPOINT}:http://localhost:5001

    # IPFS http proxy endpoint. Exposed through traefik (or any ingress / reverse proxy of choice).
    client_endpoint: ${IPFS_CLIENT_ENDPOINT}:http://localhost:3000/ipfs

    # Max file size of files that will be uploaded to IPFS (in bytes).
    max_file_size: 1048576

microservices:
  rabbitmq:
    # Connection in the form of 'amqp://[user]:[password]@[host]:[port]?heartbeat=30'
    connection:
      # RabbitMQ host
      host: ${RABBITMQ_HOST}:localhost

      # RabbitMQ AMQP port. Used by AMQP 0-9-1 and 1.0 clients without and with TLS
      port: ${RABBITMQ_PORT}:5672

      # RabbitMQ user
      user: ${RABBITMQ_USER}:alkemio-admin

      # RabbitMQ password
      password: ${RABBITMQ_PASSWORD}:alkemio!

notifications:
  enabled: ${NOTIFICATIONS_ENABLED}:true

collaboration:
  canvases:
    enabled: ${CANVASES_ENABLED}:true

## Configuration of the legal / usability aspects of the platform
platform:
  # Terms of usage that all users comply with
  terms: ${PLATFORM_TERMS}:https://alkem.io/platform/terms

  # Privacy policy for the platform
  privacy: ${PLATFORM_PRIVACY}:https://alkem.io/platform/privacy

  # Security policy for the platform
  security: ${PLATFORM_SECURITY}:https://alkem.io/platform/security

  # Link for support requests
  support: ${PLATFORM_SUPPORT}:https://alkem.io/platform/support

  # Feedback form for the platform
  feedback: ${PLATFORM_FEEDBACK}:https://alkem.io/platform/feedback

  # About the platform
  about: ${PLATFORM_ABOUT}:https://alkem.io/platform/about

ssi:
  # Jolocom SDK is used for providing SSI capabilities on the platform.
  # Note: NOT FOR PRODUCTION USAGE, experimental functionality,
  # In particular, the migrations of the Jolocom database are still not setup, so any DID's created are not
  # guaranteed to be migrated properly.
  enabled: ${SSI_ENABLED}:false

  issuer_validation_enabled: ${SSI_ISSUER_VALIDATION_ENABLED}:false

  issuers:
    alkemio:
      enabled: true
    sovrhd:
      enabled: true
      endpoint: https://wallet-api.ovrhd.nl/api/v1
      credential_types:
        - name: EmailAddress
          identifier: blob:dock:5DEGLCGsuWLkVrfiCqXTPQQEekt2kibSeyWTdUt35mmsmimn
        - name: dutchAddress
          identifier: blob:dock:5EoxGBnZ7JVg9kHonEYtz6tfHV5FufL86VEsZ34Ae8ge478n
        - name: hoplrCode
          identifier: blob:dock:5CgrXvgVaUAgzmqW2uUhuonewKmAY8VgVDfyQzziUV2ntGWz
        - name: TheHagueAddress
          identifier: blob:dock:5D2nkGSBs56D2ndc2LCMYysTGk61Mb7VLPNMGhF8GsECU2SQ

  credentials:
    the_hague_proof_of_postal_address:
      name: The Hague Postal Address [Sovrhd]
      issuer: sovrhd
      description: The holder's dutch address (type 'ThehagueAddress') as issued by Gemeente Den Haag
      schema: https://schema.org/EducationalOccupationalCredential
      types:
        - Credential
        - TheHagueAddress
      uniqueType: TheHagueAddress
      context:
        addressLine1: 'schema:streetAddress'
        addressLine2: 'schema:streetAddress'
        postalCode: 'schema:postalCode'
        city: 'schema:addressLocality'
        country: 'schema:addressLocality'
    the_hague_hoplr:
      name: The Hague Hoplr Code [Sovrhd]
      issuer: sovrhd
      description: The holder's code to participate in Hoplr on behalf of The Hague (type 'HoplrCode')
      schema: https://schema.org/EducationalOccupationalCredential
      types:
        - Credential
        - hoplrCode
      uniqueType: hoplrCode
      context:
        the_hague_hoplr: 'schema:description'
    proof_of_email_address:
      name: Email Address [Sovrhd]
      issuer: sovrhd
      description: The holder's email address (type 'EmailAdress') as issued by Sovrhd
      schema: https://schema.org/EducationalOccupationalCredential
      types:
        - Credential
        - EmailAddress
      uniqueType: EmailAddress
      context:
        emailAddress: 'schema:emailAddress'
    proof_of_community_membership:
      name: Alkemio Community Member [Test]
      issuer: jolocom
      description: The holder is a member of an Alkemio hub, challenge or opportunity community. (Issued by Alkemio, so for testing purposes)
      schema: https://schema.org/EducationalOccupationalCredential
      types:
        - Credential
        - CommunityMemberCredential
      uniqueType: CommunityMemberCredential
      context:
        alkemioUser_userID: 'schema:uuid'
        alkemioUser_email: 'schema:email'
        communityMember_communityID: 'schema:uuid'
        communityMember_displayName: 'schema:description'
      trusted_issuers:
        - jolocom
    proof_of_alkemio_membership:
      name: Alkemio User [Test]
      description: The holder is a verified Alkemio user. (Issued by Alkemio, so for testing purposes)
      issuer: jolocom
      schema: https://schema.org/EducationalOccupationalCredential
      types:
        - Credential
        - AlkemioMemberCredential
      uniqueType: AlkemioMemberCredential
      context:
        alkemioUser_userID: 'schema:uuid'
        alkemioUser_email: 'schema:email'


